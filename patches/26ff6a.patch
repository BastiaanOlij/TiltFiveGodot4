diff --git a/doc/classes/RenderingServer.xml b/doc/classes/RenderingServer.xml
index fab55da..2c25fba 100644
--- a/doc/classes/RenderingServer.xml
+++ b/doc/classes/RenderingServer.xml
@@ -3134,6 +3134,17 @@
 			<description>
 			</description>
 		</method>
+		<method name="texture_copy">
+			<return type="void" />
+			<param index="0" name="source_texture" type="RID" />
+			<param index="1" name="source_level" type="int" />
+			<param index="2" name="source_layer" type="int" />
+			<param index="3" name="dest_texture" type="RID" />
+			<param index="4" name="dest_level" type="int" />
+			<param index="5" name="dest_layer" type="int" />
+			<description>
+			</description>
+		</method>
 		<method name="viewport_attach_camera">
 			<return type="void" />
 			<param index="0" name="viewport" type="RID" />
diff --git a/drivers/gles3/storage/texture_storage.cpp b/drivers/gles3/storage/texture_storage.cpp
index bc9e9bf..6068713 100644
--- a/drivers/gles3/storage/texture_storage.cpp
+++ b/drivers/gles3/storage/texture_storage.cpp
@@ -1127,6 +1127,51 @@ void TextureStorage::texture_set_size_override(RID p_texture, int p_width, int p
 	texture->height = p_height;
 }
 
+void TextureStorage::texture_copy(RID p_source_texture, int p_source_level, int p_source_layer, RID p_dest_texture, int p_dest_level, int p_dest_layer) {
+	Texture *source_texture = texture_owner.get_or_null(p_source_texture);
+	Texture *dest_texture = texture_owner.get_or_null(p_dest_texture);
+
+	ERR_FAIL_COND(!source_texture);
+	ERR_FAIL_COND(!dest_texture);
+
+	ERR_FAIL_COND(p_source_level >= source_texture->mipmaps);
+	ERR_FAIL_COND(p_dest_level >= dest_texture->mipmaps);
+
+	ERR_FAIL_COND(p_source_layer >= source_texture->layers);
+	ERR_FAIL_COND(p_dest_layer >= dest_texture->layers);
+
+	GLuint source_framebuffer;
+	glGenFramebuffers(1, &source_framebuffer);
+	glBindFramebuffer(GL_READ_FRAMEBUFFER, source_framebuffer);
+	if(source_texture->layers > 1) {
+		glFramebufferTextureLayer(GL_READ_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, source_texture->tex_id, p_source_level, p_source_layer);
+	} else {
+		glFramebufferTexture2D(GL_READ_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, source_texture->tex_id, p_source_level);
+	}
+
+	GLuint dest_framebuffer;
+	glGenFramebuffers(1, &dest_framebuffer);
+	glBindFramebuffer(GL_DRAW_FRAMEBUFFER, dest_framebuffer);
+	if(dest_texture->layers > 1) {
+		glFramebufferTextureLayer(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, dest_texture->tex_id, p_dest_level, p_dest_layer);
+	} else {
+		glFramebufferTexture2D(GL_DRAW_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, dest_texture->tex_id, p_dest_level);
+	}
+
+	glBlitFramebuffer(
+		0, 0, source_texture->width, source_texture->height, 
+		0, 0, dest_texture->width, dest_texture->height,
+		GL_COLOR_BUFFER_BIT, GL_LINEAR);
+
+	glBindFramebuffer(GL_DRAW_FRAMEBUFFER, 0);
+	glDeleteFramebuffers(1, &dest_framebuffer);
+	glBindFramebuffer(GL_READ_FRAMEBUFFER, 0);
+	glDeleteFramebuffers(1, &source_framebuffer);
+
+
+}
+
+
 void TextureStorage::texture_set_path(RID p_texture, const String &p_path) {
 	Texture *texture = texture_owner.get_or_null(p_texture);
 	ERR_FAIL_COND(!texture);
diff --git a/drivers/gles3/storage/texture_storage.h b/drivers/gles3/storage/texture_storage.h
index c6d6018..cc668ed 100644
--- a/drivers/gles3/storage/texture_storage.h
+++ b/drivers/gles3/storage/texture_storage.h
@@ -521,6 +521,7 @@ public:
 
 	virtual void texture_replace(RID p_texture, RID p_by_texture) override;
 	virtual void texture_set_size_override(RID p_texture, int p_width, int p_height) override;
+	virtual void texture_copy(RID p_source_texture, int p_source_level, int p_source_layer, RID p_dest_texture, int p_dest_level, int p_dest_layer) override;
 
 	virtual void texture_set_path(RID p_texture, const String &p_path) override;
 	virtual String texture_get_path(RID p_texture) const override;
@@ -551,6 +552,7 @@ public:
 	void texture_bind(RID p_texture, uint32_t p_texture_no);
 	RID texture_create_radiance_cubemap(RID p_source, int p_resolution = -1) const;
 
+
 	/* TEXTURE ATLAS API */
 
 	void update_texture_atlas();
diff --git a/servers/rendering/dummy/storage/texture_storage.h b/servers/rendering/dummy/storage/texture_storage.h
index b21233a..eb46bd1 100644
--- a/servers/rendering/dummy/storage/texture_storage.h
+++ b/servers/rendering/dummy/storage/texture_storage.h
@@ -119,6 +119,7 @@ public:
 
 	virtual void texture_replace(RID p_texture, RID p_by_texture) override { texture_free(p_by_texture); };
 	virtual void texture_set_size_override(RID p_texture, int p_width, int p_height) override{};
+	virtual void texture_copy(RID p_source_texture, int p_source_level, int p_source_layer, RID p_dest_texture, int p_dest_level, int p_dest_layer) override {};
 
 	virtual void texture_set_path(RID p_texture, const String &p_path) override{};
 	virtual String texture_get_path(RID p_texture) const override { return String(); };
diff --git a/servers/rendering/renderer_rd/storage_rd/texture_storage.h b/servers/rendering/renderer_rd/storage_rd/texture_storage.h
index 7c183c6..b3a3937 100644
--- a/servers/rendering/renderer_rd/storage_rd/texture_storage.h
+++ b/servers/rendering/renderer_rd/storage_rd/texture_storage.h
@@ -486,6 +486,8 @@ public:
 
 	virtual void texture_replace(RID p_texture, RID p_by_texture) override;
 	virtual void texture_set_size_override(RID p_texture, int p_width, int p_height) override;
+	virtual void texture_copy(RID p_source_texture, int p_source_level, int p_source_layer, RID p_dest_texture, int p_dest_level, int p_dest_layer) override
+	{ /* stubbed */}
 
 	virtual void texture_set_path(RID p_texture, const String &p_path) override;
 	virtual String texture_get_path(RID p_texture) const override;
diff --git a/servers/rendering/rendering_server_default.h b/servers/rendering/rendering_server_default.h
index 32fdf47..3bc2625 100644
--- a/servers/rendering/rendering_server_default.h
+++ b/servers/rendering/rendering_server_default.h
@@ -199,6 +199,7 @@ public:
 	FUNC2(texture_replace, RID, RID)
 
 	FUNC3(texture_set_size_override, RID, int, int)
+	FUNC6(texture_copy, RID, int, int, RID, int, int)
 // FIXME: Disabled during Vulkan refactoring, should be ported.
 #if 0
 	FUNC2(texture_bind, RID, uint32_t)
diff --git a/servers/rendering/storage/texture_storage.h b/servers/rendering/storage/texture_storage.h
index a83d679..4931a2b 100644
--- a/servers/rendering/storage/texture_storage.h
+++ b/servers/rendering/storage/texture_storage.h
@@ -88,6 +88,7 @@ public:
 
 	virtual void texture_replace(RID p_texture, RID p_by_texture) = 0;
 	virtual void texture_set_size_override(RID p_texture, int p_width, int p_height) = 0;
+	virtual void texture_copy(RID p_source_texture, int p_source_level, int p_source_layer, RID p_dest_texture, int p_dest_level, int p_dest_layer) = 0;
 
 	virtual void texture_set_path(RID p_texture, const String &p_path) = 0;
 	virtual String texture_get_path(RID p_texture) const = 0;
diff --git a/servers/rendering_server.cpp b/servers/rendering_server.cpp
index c8dc8ea..2e76cf9 100644
--- a/servers/rendering_server.cpp
+++ b/servers/rendering_server.cpp
@@ -1692,6 +1692,7 @@ void RenderingServer::_bind_methods() {
 
 	ClassDB::bind_method(D_METHOD("texture_replace", "texture", "by_texture"), &RenderingServer::texture_replace);
 	ClassDB::bind_method(D_METHOD("texture_set_size_override", "texture", "width", "height"), &RenderingServer::texture_set_size_override);
+	ClassDB::bind_method(D_METHOD("texture_copy", "source_texture", "source_level", "source_layer", "dest_texture", "dest_level", "dest_layer"), &RenderingServer::texture_copy);
 
 	ClassDB::bind_method(D_METHOD("texture_set_path", "texture", "path"), &RenderingServer::texture_set_path);
 	ClassDB::bind_method(D_METHOD("texture_get_path", "texture"), &RenderingServer::texture_get_path);
diff --git a/servers/rendering_server.h b/servers/rendering_server.h
index 8043dec..5e9520f 100644
--- a/servers/rendering_server.h
+++ b/servers/rendering_server.h
@@ -121,6 +121,7 @@ public:
 
 	virtual void texture_replace(RID p_texture, RID p_by_texture) = 0;
 	virtual void texture_set_size_override(RID p_texture, int p_width, int p_height) = 0;
+	virtual void texture_copy(RID p_source_texture, int p_source_level, int p_source_layer, RID p_dest_texture, int p_dest_level, int p_dest_layer) = 0;
 
 	virtual void texture_set_path(RID p_texture, const String &p_path) = 0;
 	virtual String texture_get_path(RID p_texture) const = 0;
